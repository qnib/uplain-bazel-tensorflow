ARG DOCKER_REGISTRY=docker.io
ARG FROM_IMG_REPO=qnib
ARG FROM_IMG_NAME=uplain-bazel
ARG FROM_IMG_TAG=2018-12-23.1
ARG FROM_IMG_HASH=""
ARG BUILD_THREADS=2

### Create nccl deb
FROM ${DOCKER_REGISTRY}/${FROM_IMG_REPO}/${FROM_IMG_NAME}:${FROM_IMG_TAG}${DOCKER_IMG_HASH} AS nccl
RUN apt update \
 && apt install -y build-essential devscripts debhelper git
WORKDIR /usr/local/src
RUN git clone https://github.com/nvidia/nccl
WORKDIR /usr/local/src/nccl
ARG BUILD_THREADS
RUN make -j ${BUILD_THREADS} pkg.debian.build NVCC_GENCODE="-gencode=arch=compute_70,code=sm_70"



## git clone within external image
FROM alpine AS tfdown
ARG TF_VER=1.10.1
ARG TF_CHECKOUT=v
RUN apk --update add git
RUN git clone https://github.com/tensorflow/tensorflow /opt/tensorflow
WORKDIR /opt/tensorflow
RUN git checkout ${TF_CHECKOUT}${TF_VER}
##END git clone within external image

FROM ${DOCKER_REGISTRY}/${FROM_IMG_REPO}/${FROM_IMG_NAME}:${FROM_IMG_TAG}${DOCKER_IMG_HASH}

ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true

COPY --from=nccl /usr/local/src/nccl/build/pkg/deb/ /usr/local/deb/
RUN dpkg -i /usr/local/deb/*

WORKDIR /opt/tensorflow
RUN pip3 install wheel==0.32.3 keras_applications==1.0.4 keras_preprocessing==1.0.2 numpy==1.16.0
COPY --from=tfdown /opt/tensorflow /opt/tensorflow
ENV BAZEL_OPT_MARCH="native" \
    BAZEL_OPT_MTUNE="native" \
    BAZEL_OPTIMIZE="0" \
    D_GLIBCXX_USE_CXX11_ABI="0" \
    TF_NEED_OPENCL_SYCL="0" \
    TF_NEED_CUDA="1" \
    CUDA_TOOLKIT_PATH="/usr/local/cuda" \
    TF_CUDA_VERSION="9.2" \
    CUDNN_INSTALL_PATH="/usr/local/cuda-9.2" \
    TF_CUDNN_VERSION="7.4.1" \
    TF_NCCL_VERSION="2.4.2" \
    TF_CUDA_COMPUTE_CAPABILITIES="3.7" \
    TF_CUDA_CLANG="0" \
    GCC_HOST_COMPILER_PATH="/usr/bin/gcc" \
    PYTHON_BIN_PATH="/usr/bin/python" \
    PYTHON_LIB_PATH="/usr/local/lib/python3.6/dist-packages"
RUN echo """bazel build --cxxopt=-D_GLIBCXX_USE_CXX11_ABI='${D_GLIBCXX_USE_CXX11_ABI}' \\"""  \
 && echo """            --copt='-march=${BAZEL_OPT_MARCH}' --copt='-mtune=${BAZEL_OPT_MTUNE}' --copt='-O${BAZEL_OPTIMIZE}' \\""" \
 && echo """            --force_python=PY3 //tensorflow/tools/pip_package:build_pip_package \\""" \
 && echo """            --define grpc_no_ares=true --define with_jemalloc=true --python_path=/usr/bin/python""" \
 && bazel build --cxxopt=-D_GLIBCXX_USE_CXX11_ABI="${D_GLIBCXX_USE_CXX11_ABI}"  \
                --copt="-march=${BAZEL_OPT_MARCH}" --copt="-mtune=${BAZEL_OPT_MTUNE}" --copt="-O${BAZEL_OPTIMIZE}" \
                --force_python=PY3 //tensorflow/tools/pip_package:build_pip_package \
                --define grpc_no_ares=true --define with_jemalloc=true --python_path=/usr/bin/python
RUN mkdir -p /opt/wheel \
 && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /opt/wheel/
RUN pip3 install $(find /opt/wheel -name "*.whl")
WORKDIR /
RUN pip3 install --upgrade numpy==1.16.0 \
 && python -c 'import tensorflow as tf;hello = tf.constant("Hello, TensorFlow!");sess = tf.Session();print(sess.run(hello))'
RUN echo "python -c 'from tensorflow.python.client import device_lib;device_lib.list_local_devices()'" >> /root/.bash_history
RUN echo "python -c 'from keras import backend as K;print(K.tensorflow_backend._get_available_gpus())'" >> /root/.bash_history
